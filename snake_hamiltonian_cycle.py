## cycle ,graph
import pygame
import random
from enum import Enum
from collections import namedtuple


path = [(20, 0), (40, 0), (60, 0), (80, 0), (100, 0), (120, 0), (140, 0), (160, 0),
        (180, 0), (200, 0), (220, 0), (240, 0), (260, 0), (280, 0), (300, 0), (320, 0),
        (340, 0), (360, 0), (380, 0), (400, 0), (420, 0), (440, 0), (460, 0), (480, 0),
        (500, 0), (520, 0), (540, 0), (560, 0), (580, 0), (600, 0), (620, 0), (620, 20),
        (600, 20), (580, 20), (560, 20), (540, 20), (520, 20), (500, 20), (480, 20), (460, 20),
        (440, 20), (420, 20), (400, 20), (380, 20), (360, 20), (340, 20), (320, 20), (300, 20),
        (280, 20), (260, 20), (240, 20), (220, 20), (200, 20), (180, 20), (160, 20), (140, 20),
        (120, 20), (100, 20), (80, 20), (60, 20), (40, 20), (20, 20), (20, 40), (40, 40),
        (60, 40), (80, 40), (100, 40), (120, 40), (140, 40), (160, 40), (180, 40), (200, 40),
        (220, 40), (240, 40), (260, 40), (280, 40), (300, 40), (320, 40), (340, 40), (360, 40),
        (380, 40), (400, 40), (420, 40), (440, 40), (460, 40), (480, 40), (500, 40), (520, 40),
        (540, 40), (560, 40), (580, 40), (600, 40), (620, 40), (620, 60), (600, 60), (580, 60),
        (560, 60), (540, 60), (520, 60), (500, 60), (480, 60), (460, 60), (440, 60), (420, 60),
        (400, 60), (380, 60), (360, 60), (340, 60), (320, 60), (300, 60), (280, 60), (260, 60),
        (240, 60), (220, 60), (200, 60), (180, 60), (160, 60), (140, 60), (120, 60), (100, 60),
        (80, 60), (60, 60), (40, 60), (20, 60), (20, 80), (40, 80), (60, 80), (80, 80),
        (100, 80), (120, 80), (140, 80), (160, 80), (180, 80), (200, 80), (220, 80), (240, 80),
        (260, 80), (280, 80), (300, 80), (320, 80), (340, 80), (360, 80), (380, 80), (400, 80),
        (420, 80), (440, 80), (460, 80), (480, 80), (500, 80), (520, 80), (540, 80), (560, 80),
        (580, 80), (600, 80), (620, 80), (620, 100), (600, 100), (580, 100), (560, 100), (540, 100),
        (520, 100), (500, 100), (480, 100), (460, 100), (440, 100), (420, 100), (400, 100), (380, 100),
        (360, 100), (340, 100), (320, 100), (300, 100), (280, 100), (260, 100), (240, 100), (220, 100),
        (200, 100), (180, 100), (160, 100), (140, 100), (120, 100), (100, 100), (80, 100), (60, 100),
        (40, 100), (20, 100), (20, 120), (40, 120), (60, 120), (80, 120), (100, 120), (120, 120),
        (140, 120), (160, 120), (180, 120), (200, 120), (220, 120), (240, 120), (260, 120), (280, 120),
        (300, 120), (320, 120), (340, 120), (360, 120), (380, 120), (400, 120), (420, 120), (440, 120),
        (460, 120), (480, 120), (500, 120), (520, 120), (540, 120), (560, 120), (580, 120), (600, 120),
        (620, 120), (620, 140), (600, 140), (580, 140), (560, 140), (540, 140), (520, 140), (500, 140),
        (480, 140), (460, 140), (440, 140), (420, 140), (400, 140), (380, 140), (360, 140), (340, 140),
        (320, 140), (300, 140), (280, 140), (260, 140), (240, 140), (220, 140), (200, 140), (180, 140),
        (160, 140), (140, 140), (120, 140), (100, 140), (80, 140), (60, 140), (40, 140), (20, 140),
        (20, 160), (40, 160), (60, 160), (80, 160), (100, 160), (120, 160), (140, 160), (160, 160),
        (180, 160), (200, 160), (220, 160), (240, 160), (260, 160), (280, 160), (300, 160), (320, 160),
        (340, 160), (360, 160), (380, 160), (400, 160), (420, 160), (440, 160), (460, 160), (480, 160),
        (500, 160), (520, 160), (540, 160), (560, 160), (580, 160), (600, 160), (620, 160), (620, 180),
        (600, 180), (580, 180), (560, 180), (540, 180), (520, 180), (500, 180), (480, 180), (460, 180),
        (440, 180), (420, 180), (400, 180), (380, 180), (360, 180), (340, 180), (320, 180), (300, 180),
        (280, 180), (260, 180), (240, 180), (220, 180), (200, 180), (180, 180), (160, 180), (140, 180),
        (120, 180), (100, 180), (80, 180), (60, 180), (40, 180), (20, 180), (20, 200), (40, 200),
        (60, 200), (80, 200), (100, 200), (120, 200), (140, 200), (160, 200), (180, 200), (200, 200),
        (220, 200), (240, 200), (260, 200), (280, 200), (300, 200), (320, 200), (340, 200), (360, 200),
        (380, 200), (400, 200), (420, 200), (440, 200), (460, 200), (480, 200), (500, 200), (520, 200),
        (540, 200), (560, 200), (580, 200), (600, 200), (620, 200), (620, 220), (600, 220), (580, 220),
        (560, 220), (540, 220), (520, 220), (500, 220), (480, 220), (460, 220), (440, 220), (420, 220),
        (400, 220), (380, 220), (360, 220), (340, 220), (320, 220), (300, 220), (280, 220), (260, 220),
        (240, 220), (220, 220), (200, 220), (180, 220), (160, 220), (140, 220), (120, 220), (100, 220),
        (80, 220), (60, 220), (40, 220), (20, 220), (20, 240), (40, 240), (60, 240), (80, 240),
        (100, 240), (120, 240), (140, 240), (160, 240), (180, 240), (200, 240), (220, 240), (240, 240),
        (260, 240), (280, 240), (300, 240), (320, 240), (340, 240), (360, 240), (380, 240), (400, 240),
        (420, 240), (440, 240), (460, 240), (480, 240), (500, 240), (520, 240), (540, 240), (560, 240),
        (580, 240), (600, 240), (620, 240), (620, 260), (600, 260), (580, 260), (560, 260), (540, 260),
        (520, 260), (500, 260), (480, 260), (460, 260), (440, 260), (420, 260), (400, 260), (380, 260),
        (360, 260), (340, 260), (320, 260), (300, 260), (280, 260), (260, 260), (240, 260), (220, 260),
        (200, 260), (180, 260), (160, 260), (140, 260), (120, 260), (100, 260), (80, 260), (60, 260),
        (40, 260), (20, 260), (20, 280), (40, 280), (60, 280), (80, 280), (100, 280), (120, 280),
        (140, 280), (160, 280), (180, 280), (200, 280), (220, 280), (240, 280), (260, 280), (280, 280),
        (300, 280), (320, 280), (340, 280), (360, 280), (380, 280), (400, 280), (420, 280), (440, 280),
        (460, 280), (480, 280), (500, 280), (520, 280), (540, 280), (560, 280), (580, 280), (600, 280),
        (620, 280), (620, 300), (600, 300), (580, 300), (560, 300), (540, 300), (520, 300), (500, 300),
        (480, 300), (460, 300), (440, 300), (420, 300), (400, 300), (380, 300), (360, 300), (340, 300),
        (320, 300), (300, 300), (280, 300), (260, 300), (240, 300), (220, 300), (200, 300), (180, 300),
        (160, 300), (140, 300), (120, 300), (100, 300), (80, 300), (60, 300), (40, 300), (20, 300),
        (20, 320), (40, 320), (60, 320), (80, 320), (100, 320), (120, 320), (140, 320), (160, 320),
        (180, 320), (200, 320), (220, 320), (240, 320), (260, 320), (280, 320), (300, 320), (320, 320),
        (340, 320), (360, 320), (380, 320), (400, 320), (420, 320), (440, 320), (460, 320), (480, 320),
        (500, 320), (520, 320), (540, 320), (560, 320), (580, 320), (600, 320), (620, 320), (620, 340),
        (600, 340), (580, 340), (560, 340), (540, 340), (520, 340), (500, 340), (480, 340), (460, 340),
        (440, 340), (420, 340), (400, 340), (380, 340), (360, 340), (340, 340), (320, 340), (300, 340),
        (280, 340), (260, 340), (240, 340), (220, 340), (200, 340), (180, 340), (160, 340), (140, 340),
        (120, 340), (100, 340), (80, 340), (60, 340), (40, 340), (20, 340), (20, 360), (40, 360),
        (60, 360), (80, 360), (100, 360), (120, 360), (140, 360), (160, 360), (180, 360), (200, 360),
        (220, 360), (240, 360), (260, 360), (280, 360), (300, 360), (320, 360), (340, 360), (360, 360),
        (380, 360), (400, 360), (420, 360), (440, 360), (460, 360), (480, 360), (500, 360), (520, 360),
        (540, 360), (560, 360), (580, 360), (600, 360), (620, 360), (620, 380), (600, 380), (580, 380),
        (560, 380), (540, 380), (520, 380), (500, 380), (480, 380), (460, 380), (440, 380), (420, 380),
        (400, 380), (380, 380), (360, 380), (340, 380), (320, 380), (300, 380), (280, 380), (260, 380),
        (240, 380), (220, 380), (200, 380), (180, 380), (160, 380), (140, 380), (120, 380), (100, 380),
        (80, 380), (60, 380), (40, 380), (20, 380), (20, 400), (40, 400), (60, 400), (80, 400),
        (100, 400), (120, 400), (140, 400), (160, 400), (180, 400), (200, 400), (220, 400), (240, 400),
        (260, 400), (280, 400), (300, 400), (320, 400), (340, 400), (360, 400), (380, 400), (400, 400),
        (420, 400), (440, 400), (460, 400), (480, 400), (500, 400), (520, 400), (540, 400), (560, 400),
        (580, 400), (600, 400), (620, 400), (620, 420), (600, 420), (580, 420), (560, 420), (540, 420),
        (520, 420), (500, 420), (480, 420), (460, 420), (440, 420), (420, 420), (400, 420), (380, 420),
        (360, 420), (340, 420), (320, 420), (300, 420), (280, 420), (260, 420), (240, 420), (220, 420),
        (200, 420), (180, 420), (160, 420), (140, 420), (120, 420), (100, 420), (80, 420), (60, 420),
        (40, 420), (20, 420), (20, 440), (40, 440), (60, 440), (80, 440), (100, 440), (120, 440),
        (140, 440), (160, 440), (180, 440), (200, 440), (220, 440), (240, 440), (260, 440), (280, 440),
        (300, 440), (320, 440), (340, 440), (360, 440), (380, 440), (400, 440), (420, 440), (440, 440),
        (460, 440), (480, 440), (500, 440), (520, 440), (540, 440), (560, 440), (580, 440), (600, 440),
        (620, 440), (620, 460), (600, 460), (580, 460), (560, 460), (540, 460), (520, 460), (500, 460),
        (480, 460), (460, 460), (440, 460), (420, 460), (400, 460), (380, 460), (360, 460), (340, 460),
        (320, 460), (300, 460), (280, 460), (260, 460), (240, 460), (220, 460), (200, 460), (180, 460),
        (160, 460), (140, 460), (120, 460), (100, 460), (80, 460), (60, 460), (40, 460), (20, 460),
        (0, 460), (0, 440), (0, 420), (0, 400), (0, 380), (0, 360), (0, 340), (0, 320),
        (0, 300), (0, 280), (0, 260), (0, 240), (0, 220), (0, 200), (0, 180), (0, 160),
        (0, 140), (0, 120), (0, 100), (0, 80), (0, 60), (0, 40), (0, 20), (0, 0)]


ln = len(path)
to_take = 768
pygame.init()
font = pygame.font.Font('arial.ttf', 25)
#font = pygame.font.SysFont('arial', 25)

class Direction(Enum):
    RIGHT = 1
    LEFT = 2
    UP = 3
    DOWN = 4
    
Point = namedtuple('Point', 'x, y')

# rgb colors
WHITE = (255, 255, 255)
RED = (200,0,0)
BLUE1 = (0, 0, 255)
BLUE2 = (0, 100, 255)
BLACK = (0,0,0)

BLOCK_SIZE = 20
SPEED = 20

class SnakeGame:

    def __init__(self, w=640, h=480):
        self.curr = 1
        self.w = w
        self.h = h
        # init display
        self.display = pygame.display.set_mode((self.w, self.h))
        pygame.display.set_caption('Snake')
        self.clock = pygame.time.Clock()
        
        # init game state
        self.direction = Direction.RIGHT
        
        self.head = Point(40, 0)
        self.snake = [self.head, 
                      Point(self.head.x-BLOCK_SIZE, self.head.y),
                      Point(self.head.x-(2*BLOCK_SIZE), self.head.y)]
        
        self.score = 0
        self.food = None
        self._place_food()
        
    def _place_food(self):
        x = random.randint(0, (self.w-BLOCK_SIZE )//BLOCK_SIZE )*BLOCK_SIZE 
        y = random.randint(0, (self.h-BLOCK_SIZE )//BLOCK_SIZE )*BLOCK_SIZE
        self.food = Point(x, y)
        if self.food in self.snake:
            self._place_food()
        
    def play_step(self):
        # 1. collect user input
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            '''if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    self.direction = Direction.LEFT
                elif event.key == pygame.K_RIGHT:
                    self.direction = Direction.RIGHT
                elif event.key == pygame.K_UP:
                    self.direction = Direction.UP
                elif event.key == pygame.K_DOWN:
                    self.direction = Direction.DOWN
            '''
        next = self.curr + 1
        next = next % ln
        if path[next][1] == path[self.curr][1] and path[next][0] > path[self.curr][0]:
            self.direction = Direction.RIGHT
        elif path[next][1] == path[self.curr][1] and path[next][0] < path[self.curr][0]:
            self.direction = Direction.LEFT
        elif path[next][0] == path[self.curr][0] and path[next][1] > path[self.curr][1]:
            self.direction = Direction.DOWN
        elif path[next][0] == path[self.curr][0] and path[next][1] < path[self.curr][1]:
            self.direction = Direction.UP
        self.curr = next
        
        # 2. move
        self._move(self.direction) # update the head
        self.snake.insert(0, self.head)
        
        # 3. check if game over
        game_over = False
        if self._is_collision():
            game_over = True
            return game_over, self.score
            
        # 4. place new food or just move
        if self.head == self.food:
            self.score += 1
            if self.score == 768:
                pygame.quit()
                quit()
            self._place_food()
        else:
            self.snake.pop()
        
        # 5. update ui and clock
        self._update_ui()
        self.clock.tick(SPEED)
        # 6. return game over and score
        return game_over, self.score
    
    def _is_collision(self):
        # hits boundary
        if self.head.x > self.w - BLOCK_SIZE or self.head.x < 0 or self.head.y > self.h - BLOCK_SIZE or self.head.y < 0:
            return True
        # hits itself
        if self.head in self.snake[1:]:
            return True
        
        return False
        
    def _update_ui(self):
        self.display.fill(BLACK)
        
        for pt in self.snake:
            pygame.draw.rect(self.display, BLUE1, pygame.Rect(pt.x, pt.y, BLOCK_SIZE, BLOCK_SIZE))
            pygame.draw.rect(self.display, BLUE2, pygame.Rect(pt.x+4, pt.y+4, 12, 12))
            
        pygame.draw.rect(self.display, RED, pygame.Rect(self.food.x, self.food.y, BLOCK_SIZE, BLOCK_SIZE))
        
        text = font.render("Score: " + str(self.score), True, WHITE)
        self.display.blit(text, [0, 0])
        pygame.display.flip()
        
    def _move(self, direction):
        x = self.head.x
        y = self.head.y
        if direction == Direction.RIGHT:
            x += BLOCK_SIZE
        elif direction == Direction.LEFT:
            x -= BLOCK_SIZE
        elif direction == Direction.DOWN:
            y += BLOCK_SIZE
        elif direction == Direction.UP:
            y -= BLOCK_SIZE
            
        self.head = Point(x, y)
            

if __name__ == '__main__':
    game = SnakeGame()
    
    # game loop
    while True:
        game_over, score = game.play_step()
        
        if game_over == True:
            break
        
    print('Final Score', score)
        
        
    pygame.quit()
